// Generated by CoffeeScript 2.7.0
(function() {
  var Grid, array2d, buf, chkGetNeighbors, data, fixture, grid, height, path, syncfinder_astar, width, zlib;

  Grid = require("../grid");

  fixture = require("./fixture");

  zlib = require('zlib');

  syncfinder_astar = require("../syncfinder_astar");

  // check getNeighbors
  chkGetNeighbors = function(width, height, grid) {
    var i, j, neighbors, ref, ref1, x, y;
    console.log(`[chkGetNeighbors] width:${width}, height:${height}, grid:${grid}`);
    for (y = i = 0, ref = height; (0 <= ref ? i < ref : i > ref); y = 0 <= ref ? ++i : --i) {
      for (x = j = 0, ref1 = width; (0 <= ref1 ? j < ref1 : j > ref1); x = 0 <= ref1 ? ++j : --j) {
        neighbors = grid.getNeighbors(x, y);
        console.log(`neighbors@x:${x}, y:${y}, neighbors:${neighbors}, ${grid.toString(x << 16 | y, null, neighbors)}`);
      }
    }
  };

  // test building a map buffer from 2d array
  array2d = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [1, 1, 0, 0], [1, 0, 0, 0]];

  width = 4;

  height = 5;

  buf = Grid.bytesFrom2DArray(width, height, array2d);

  grid = new Grid(width, height, buf);

  // check getNeighbors
  //chkGetNeighbors(width, height, grid)

  // isWalkableAt test
  console.log(grid.isWalkableAt(0, 0)); // should be false

  grid.setWalkableAt(0, 0, true);

  console.log(grid.isWalkableAt(0, 0)); // should be true

  grid.setWalkableAt(0, 0, true);

  console.log(grid.isWalkableAt(0, 0)); // should be true

  grid.setWalkableAt(0, 0, false);

  console.log(grid.isWalkableAt(0, 0)); // should be false

  console.log(grid.isWalkableAt(0, 1)); // should be true

  grid.setWalkableAt(0, 1, false);

  console.log(grid.isWalkableAt(0, 1)); // should be false

  grid.setWalkableAt(0, 1, true);

  console.log(grid.isWalkableAt(0, 1)); // should be true

  grid.setWalkableAt(0, 1, true);

  console.log(grid.isWalkableAt(0, 1)); // should be true

  path = syncfinder_astar.findPath(1, 0, 1, 4, grid);

  console.log(`path:${path}`);

  console.log(`path on grid :${grid.toString(1 << 16 | 0, 1 << 16 | 4, path)}`);

  // building a map buffer from compressed bytes
  data = fixture[378];

  console.dir(data);

  // uncompress block data
  zlib.inflate(Buffer.from(data['blockdata'], 'base64'), function(err, buf) {
    var end, msSpent, now, start;
    if (err != null) {
      throw "FATAL...fail to inflate scene asset json";
      return;
    }
    grid = new Grid(data.width, data.height, buf);
    console.log(`grid2: ${grid}`);
    start = grid.getARandomWalkableBrick();
    end = grid.getARandomWalkableBrick();
    now = Date.now();
    path = syncfinder_astar.findPathByBrickLoc(start, end, grid);
    msSpent = Date.now() - now;
    console.log(`find path, ms spent:${msSpent}: path: ${grid.toString(start, end, path)}`);
  });

  return;

}).call(this);
